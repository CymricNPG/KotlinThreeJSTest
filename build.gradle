group 'net.npg'
version '0.1'

buildscript {
    ext.kotlin_version = '1.3.0'
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
    }
}

apply plugin: 'kotlin2js'
apply plugin: "com.moowork.node"

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    compile "info.laht.threekt:wrapper:0.88-ALPHA-6"
    testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
}

[compileTestKotlin2Js, compileKotlin2Js]*.configure {
    kotlinOptions.moduleKind = "umd"
    kotlinOptions.metaInfo = true
    kotlinOptions.sourceMap = true
}

// Assemble

task assembleWeb(type: Sync) {
    configurations.compile.each { File file ->
        from(zipTree(file.absolutePath), {
            includeEmptyDirs = false
            include { fileTreeElement ->
                def path = fileTreeElement.path
                path.endsWith(".js") && (path.startsWith("META-INF/resources/") ||
                        !path.startsWith("META-INF/"))
            }
        })
    }
    from compileKotlin2Js.destinationDir
    into "${projectDir}/web/js/kt2js"

    dependsOn classes
}

assemble.dependsOn assembleWeb

// Testing

node {
    download = true
}

task populateNodeModules(type: Copy, dependsOn: compileKotlin2Js) {
    from compileKotlin2Js.destinationDir

    configurations.testCompile.each {
        from zipTree(it.absolutePath).matching { include '*.js' }
    }
    into "${buildDir}/node_modules"
}

task populateNodeModulesWithTest(type: Copy, dependsOn: compileTestKotlin2Js) {
    from compileTestKotlin2Js.destinationDir

    configurations.testCompile.each {
        from zipTree(it.absolutePath).matching { include '*.js' }
    }
    into "${buildDir}/node_modules"
}

task copyTestScript(type: Copy, dependsOn: populateNodeModules) {
    from file("${projectDir}/src/test/javascript/test.js")
    into "${buildDir}/node_modules/"
}

task installPackages(type: NpmTask) {
    args = ['install', 'qunitjs', 'three@0.88.0']
}

task runQunit(type: NodeTask, dependsOn: [compileKotlin2Js,
                                          compileTestKotlin2Js,
                                          populateNodeModules,
                                          populateNodeModulesWithTest,
                                          copyTestScript,
                                          installPackages]) {
    script = file('node_modules/qunitjs/bin/qunit')
    args = [projectDir.toPath().relativize(file("${buildDir}/node_modules/test.js").toPath())]
}

test.dependsOn runQunit

// Hack to speed up testing, if node/npm already is installed
npmSetup.onlyIf {
    !npmSetup.npmDir.exists()
}

nodeSetup.onlyIf {
    !nodeSetup.nodeDir.exists()
}
